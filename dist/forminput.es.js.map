{"version":3,"file":"forminput.es.js","sources":["../src/components/form-input/FormInput.tsx"],"sourcesContent":["import { FormControl, FormField, FormItem, FormLabel, FormMessage } from \"../form/Form\";\r\nimport { SlotProps } from \"@radix-ui/react-slot\";\r\nimport { Control, ControllerProps, FieldPath, FieldValues } from \"react-hook-form\";\r\nimport { TextField, TextFieldProps } from \"../text-field/TextField\";\r\n\r\ntype FormInputProps<TFieldValues extends FieldValues, TName extends FieldPath<TFieldValues>> = Omit<\r\n  ControllerProps<TFieldValues, TName>,\r\n  \"render\"\r\n> & {\r\n  label: string;\r\n  control: Control<TFieldValues>;\r\n  slotProps?: {\r\n    formItemProps?: React.HTMLAttributes<HTMLDivElement> & React.RefAttributes<HTMLDivElement>;\r\n    formLabelProps?: React.HTMLAttributes<HTMLLabelElement> & React.RefAttributes<HTMLLabelElement>;\r\n    formMessageProps?: React.HTMLAttributes<HTMLParagraphElement> & React.RefAttributes<HTMLParagraphElement>;\r\n    formControlProps?: Omit<SlotProps & React.RefAttributes<HTMLElement>, \"ref\"> & React.RefAttributes<HTMLElement>;\r\n    textFieldProps?: TextFieldProps & React.RefAttributes<HTMLInputElement>;\r\n  };\r\n};\r\n\r\nconst FormInput = <TFieldValues extends FieldValues, TName extends FieldPath<TFieldValues>>(props: FormInputProps<TFieldValues, TName>) => {\r\n  const { name, control, defaultValue, disabled, rules, shouldUnregister, label, slotProps } = props;\r\n\r\n  return (\r\n    <FormField\r\n      control={control}\r\n      name={name}\r\n      defaultValue={defaultValue}\r\n      disabled={disabled}\r\n      rules={rules}\r\n      shouldUnregister={shouldUnregister}\r\n      render={({ field }) => {\r\n        return (\r\n          <FormItem {...(slotProps?.formItemProps ?? {})}>\r\n            <FormLabel {...(slotProps?.formLabelProps ?? {})}>{label}</FormLabel>\r\n            <FormControl {...(slotProps?.formControlProps ?? {})}>\r\n              <TextField\r\n                {...(slotProps?.textFieldProps ?? {})}\r\n                slotProps={{ inputProps: { ...slotProps?.textFieldProps?.slotProps?.inputProps, ...field } }}\r\n              />\r\n            </FormControl>\r\n            <FormMessage {...(slotProps?.formMessageProps ?? {})} />\r\n          </FormItem>\r\n        );\r\n      }}\r\n    />\r\n  );\r\n};\r\nexport { FormInput, type FormInputProps };\r\n"],"names":["FormInput","props","name","control","defaultValue","disabled","rules","shouldUnregister","label","slotProps","jsx","FormField","field","FormItem","FormLabel","FormControl","TextField","FormMessage"],"mappings":";;;AAoBM,MAAAA,IAAY,CAA0EC,MAA+C;AACnI,QAAA,EAAE,MAAAC,GAAM,SAAAC,GAAS,cAAAC,GAAc,UAAAC,GAAU,OAAAC,GAAO,kBAAAC,GAAkB,OAAAC,GAAO,WAAAC,EAAA,IAAcR;AAG3F,SAAA,gBAAAS;AAAA,IAACC;AAAA,IAAA;AAAA,MACC,SAAAR;AAAA,MACA,MAAAD;AAAA,MACA,cAAAE;AAAA,MACA,UAAAC;AAAA,MACA,OAAAC;AAAA,MACA,kBAAAC;AAAA,MACA,QAAQ,CAAC,EAAE,OAAAK,0BAENC,GAAU,EAAA,GAAIJ,GAAW,iBAAiB,CACzC,GAAA,UAAA;AAAA,QAAA,gBAAAC,EAACI,KAAW,GAAIL,GAAW,kBAAkB,IAAM,UAAMD,GAAA;AAAA,0BACxDO,GAAa,EAAA,GAAIN,GAAW,oBAAoB,CAAA,GAC/C,UAAA,gBAAAC;AAAA,UAACM;AAAA,UAAA;AAAA,YACE,GAAIP,GAAW,kBAAkB,CAAC;AAAA,YACnC,WAAW,EAAE,YAAY,EAAE,GAAGA,GAAW,gBAAgB,WAAW,YAAY,GAAGG,EAAQ,EAAA;AAAA,UAAA;AAAA,QAAA,GAE/F;AAAA,0BACCK,GAAa,EAAA,GAAIR,GAAW,oBAAoB,CAAA,EAAK,CAAA;AAAA,MAAA,GACxD;AAAA,IAEJ;AAAA,EACF;AAEJ;"}